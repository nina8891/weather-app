{"version":3,"sources":["App.module.css","components/WeatherData/weatherData.module.css","components/info.module.css","components/Form/form.module.css","components/info.js","components/Form/form.js","components/WeatherData/weatherData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Info","className","classes","Form","props","onSubmit","weatherMethod","type","name","placeholder","WeatherData","city","country","temp","pressure","sunset","Error","error","API_KEY","App","state","undefined","gettingWeather","event","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","Blocks","Left","Right","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,KAAO,kBAAkB,MAAQ,qB,iBCAvGD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,6B,sBCAzED,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,qB,uOCSVC,EAPD,kBACV,yBAAKC,UAAWC,IAAQF,MACpB,iDACA,gE,iBCOOG,EAVF,SAAAC,GAAK,OACd,0BACIH,UAAWC,IAAQC,KACnBE,SAAUD,EAAME,eAEhB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,kD,gBCOOC,EAbK,SAAAN,GAAK,OACrB,yBAAKH,UAAWC,IAAQQ,aAClBN,EAAMO,MACR,kBAAC,WAAD,KACI,2BAAG,2CAAH,IAA2BP,EAAMO,KAAjC,KAAyCP,EAAMQ,SAC/C,2BAAG,8CAAH,IAA8BR,EAAMS,KAApC,WACA,2BAAG,uDAAH,IAAuCT,EAAMU,SAA7C,SACA,2BAAG,yCAAH,IAAyBV,EAAMW,SAEnC,uBAAGd,UAAWC,IAAQc,OAASZ,EAAMa,SCNvCC,EAAU,mCAyEDC,E,2MArEbC,MAAQ,CACNP,UAAMQ,EACNV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,YAAQM,EACRJ,WAAOI,G,EAGTC,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,yDACfD,EAAME,mBAEFd,EAAOY,EAAMG,OAAOC,SAAShB,KAAKiB,OAHvB,iCAMSC,MAAM,qDAAD,OAAsDlB,EAAtD,kBAAoEO,EAApE,kBANd,cAMPY,EANO,gBAOMA,EAAQC,OAPd,OAOPC,EAPO,OASTjB,EAASiB,EAAKC,IAAIlB,QAClBmB,EAAO,IAAIC,MACVC,QAAQrB,GACTsB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEzE,EAAKC,SAAS,CACZ5B,KAAMmB,EAAKU,KAAK7B,KAChBF,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKC,IAAIrB,QAClBE,SAAUkB,EAAKU,KAAK5B,SACpBC,OAAQsB,EACRpB,MAAO,KApBI,wBAuBb,EAAKwB,SAAS,CACZ5B,UAAMQ,EACNV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,YAAQM,EACRJ,MAAO,sBA7BI,4C,8HAmCf,OACE,yBAAKhB,UAAWC,IAAQiB,KACtB,yBAAKlB,UAAWC,IAAQyC,QACtB,yBAAK1C,UAAWC,IAAQ0C,MACtB,kBAAC,EAAD,OAEF,yBAAK3C,UAAWC,IAAQ2C,OACtB,kBAAC,EAAD,CACEvC,cAAewC,KAAKxB,iBAEtB,kBAAC,EAAD,CACET,KAAMiC,KAAK1B,MAAMP,KACjBF,KAAMmC,KAAK1B,MAAMT,KACjBC,QAASkC,KAAK1B,MAAMR,QACpBE,SAAUgC,KAAK1B,MAAMN,SACrBC,OAAQ+B,KAAK1B,MAAML,OACnBE,MAAO6B,KAAK1B,MAAMH,e,GA9Dd8B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2ec55806.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__SU48D\",\"Blocks\":\"App_Blocks__2wbmZ\",\"Left\":\"App_Left__3AkiE\",\"Right\":\"App_Right__2MSua\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherData\":\"weatherData_WeatherData__2M098\",\"Error\":\"weatherData_Error__8s7Mo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Info\":\"info_Info__VFrg4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"form_Form___Gc-V\"};","import React from 'react'\r\nimport classes from './info.module.css'\r\n\r\nconst  Info = () => (\r\n    <div className={classes.Info}>\r\n        <h2>React Weather App</h2>\r\n        <p>Weather forecast for your city.</p>\r\n    </div>\r\n)\r\n \r\nexport default Info","import React from 'react'\r\nimport classes from './form.module.css'\r\n\r\nconst Form = props =>(\r\n    <form \r\n        className={classes.Form}\r\n        onSubmit={props.weatherMethod}\r\n    >\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        <button>Get forecast</button>\r\n    </form>\r\n)\r\n\r\nexport default Form","import React, {Fragment} from 'react'\r\nimport classes from './weatherData.module.css'\r\n \r\nconst WeatherData = props => (\r\n    <div className={classes.WeatherData}>\r\n        { props.city && \r\n        <Fragment>               \r\n            <p><span>Location:</span> {props.city}, {props.country}</p>\r\n            <p><span>Temperature:</span> {props.temp} &#176; C</p>\r\n            <p><span>Atmospheric pressure:</span> {props.pressure} mmHg</p>\r\n            <p><span>Sunset:</span> {props.sunset}</p>\r\n        </Fragment> }\r\n        <p className={classes.Error}>{ props.error }</p>\r\n    </div>\r\n)\r\n\r\nexport default WeatherData","import React from 'react';\nimport classes from './App.module.css';\nimport Info from './components/info';\nimport Form from './components/Form/form';\nimport WeatherData from './components/WeatherData/weatherData';\n\nconst API_KEY = 'd6d0f7bdfe76b433ced172c56fff7444'\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n\n  gettingWeather = async (event) => {\n    event.preventDefault()\n\n    let city = event.target.elements.city.value\n\n    if (city) {\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\n      const data = await api_url.json()\n\n      let sunset = data.sys.sunset\n      let date = new Date()\n      date.setTime(sunset)\n      let sunset_date = date.getHours() + ':' + date.getMinutes() + \":\" + date.getSeconds()\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunset: sunset_date,\n        error: \"\"\n      })\n    }  else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: \"Please enter city\"\n      })  \n    }\n  }\n\n  render() {\n    return (\n      <div className={classes.App}>\n        <div className={classes.Blocks}>\n          <div className={classes.Left}>\n            <Info/>\n          </div>\n          <div className={classes.Right}>\n            <Form\n              weatherMethod={this.gettingWeather}\n            />\n            <WeatherData\n              temp={this.state.temp}\n              city={this.state.city}\n              country={this.state.country}\n              pressure={this.state.pressure}\n              sunset={this.state.sunset}\n              error={this.state.error}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}