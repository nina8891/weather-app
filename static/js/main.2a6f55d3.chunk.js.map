{"version":3,"sources":["components/info.js","components/Form/form.js","components/WeatherData/weatherData.js","App.js","serviceWorker.js","index.js"],"names":["Info","className","Form","this","props","city","handleCityChange","handleSubmit","onSubmit","type","onChange","value","onClick","React","Component","WeatherData","country","temp","pressure","sunset","error","API_KEY","process","App","state","event","setState","currentTarget","a","preventDefault","fetch","api_url","json","data","message","undefined","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","main","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAUeA,G,MAPD,kBACV,yBAAKC,UAAU,QACX,iDACA,iECUOC,G,uLAZH,IAAD,EAC0CC,KAAKC,MAA9CC,EADD,EACCA,KAAMC,EADP,EACOA,iBAAkBC,EADzB,EACyBA,aAEhC,OACE,0BAAMN,UAAU,OAAOO,SAAUD,GAC/B,2BAAOE,KAAK,OAAOC,SAAUJ,EAAkBK,MAAON,IACtD,4BAAQO,QAASL,GAAjB,qB,GAPWM,IAAMC,YCsBVC,G,MAtBK,SAAAX,GAAK,OACvB,yBAAKH,UAAU,eACZG,EAAMC,MACL,kBAAC,WAAD,KACE,2BACE,2CADF,IAC0BD,EAAMC,KADhC,KACwCD,EAAMY,SAE9C,2BACE,8CADF,IAC6BZ,EAAMa,KADnC,WAGA,2BACE,uDADF,IACsCb,EAAMc,SAD5C,SAGA,2BACE,yCADF,IACwBd,EAAMe,SAIlC,uBAAGlB,UAAU,SAASG,EAAMgB,UCf1BC,G,MAAUC,oCA8FDC,E,2MA3FbC,MAAQ,CACNP,KAAM,KACNZ,KAAM,GACNW,QAAS,KACTE,SAAU,KACVC,OAAQ,KACRC,MAAO,M,EAGTd,iBAAmB,SAAAmB,GACjB,EAAKC,SAAS,CACZrB,KAAMoB,EAAME,cAAchB,S,EAI9BJ,a,uCAAe,WAAMkB,GAAN,yBAAAG,EAAA,yDACbH,EAAMI,mBAEExB,EAAS,EAAKmB,MAAdnB,MAHK,iCAMWyB,MAAM,qDAAD,OAC4BzB,EAD5B,kBAC0CgB,EAD1C,kBANhB,cAMLU,EANK,gBASQA,EAAQC,OAThB,OAWU,oBAFfC,EATK,QAWFC,QACP,EAAKR,SAAS,CACZT,UAAMkB,EACN9B,UAAM8B,EACNnB,aAASmB,EACTjB,cAAUiB,EACVhB,YAAQgB,EACRf,MAAO,oCAGLD,EAASc,EAAKG,IAAIjB,QAClBkB,EAAO,IAAIC,MACVC,QAAQpB,GACTqB,EACJH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEvD,EAAKjB,SAAS,CACZT,KAAMgB,EAAKW,KAAK3B,KAChBZ,KAAM4B,EAAKY,KACX7B,QAASiB,EAAKG,IAAIpB,QAClBE,SAAUe,EAAKW,KAAK1B,SACpBC,OAAQqB,EACRpB,MAAO,MAjCA,wBAqCX,EAAKM,SAAS,CACZT,UAAMkB,EACN9B,UAAM8B,EACNnB,aAASmB,EACTjB,cAAUiB,EACVhB,YAAQgB,EACRf,MAAO,sBA3CE,4C,8HAiDb,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,EAAD,CACEI,KAAMF,KAAKqB,MAAMnB,KACjBE,aAAcJ,KAAKI,aACnBD,iBAAkBH,KAAKG,mBAEzB,kBAAC,EAAD,CACEW,KAAMd,KAAKqB,MAAMP,KACjBZ,KAAMF,KAAKqB,MAAMnB,KACjBW,QAASb,KAAKqB,MAAMR,QACpBE,SAAUf,KAAKqB,MAAMN,SACrBC,OAAQhB,KAAKqB,MAAML,OACnBC,MAAOjB,KAAKqB,MAAMJ,e,GAnFdP,IAAMC,WCIJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2a6f55d3.chunk.js","sourcesContent":["import React from 'react'\r\nimport './info.css'\r\n\r\nconst  Info = () => (\r\n    <div className='Info'>\r\n        <h2>React Weather App</h2>\r\n        <p>Weather forecast for your city.</p>\r\n    </div>\r\n)\r\n \r\nexport default Info","import React from 'react'\r\nimport './form.css'\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    const { city, handleCityChange, handleSubmit } = this.props;\r\n\r\n    return (\r\n      <form className=\"Form\" onSubmit={handleSubmit}>\r\n        <input type=\"text\" onChange={handleCityChange} value={city} />\r\n        <button onClick={handleSubmit}>Get forecast</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Fragment } from 'react';\r\nimport './weatherData.css';\r\n\r\nconst WeatherData = props => (\r\n  <div className='WeatherData'>\r\n    {props.city && (\r\n      <Fragment>\r\n        <p>\r\n          <span>Location:</span> {props.city}, {props.country}\r\n        </p>\r\n        <p>\r\n          <span>Temperature:</span> {props.temp} &#176; C\r\n        </p>\r\n        <p>\r\n          <span>Atmospheric pressure:</span> {props.pressure} mmHg\r\n        </p>\r\n        <p>\r\n          <span>Sunset:</span> {props.sunset}\r\n        </p>\r\n      </Fragment>\r\n    )}\r\n    <p className='Error'>{props.error}</p>\r\n  </div>\r\n);\r\n\r\nexport default WeatherData;\r\n","import React from 'react';\r\nimport Info from './components/info';\r\nimport Form from './components/Form/form';\r\nimport WeatherData from './components/WeatherData/weatherData';\r\nimport './App.scss';\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temp: null,\r\n    city: '',\r\n    country: null,\r\n    pressure: null,\r\n    sunset: null,\r\n    error: null,\r\n  };\r\n\r\n  handleCityChange = event => {\r\n    this.setState({\r\n      city: event.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    const { city } = this.state;\r\n\r\n    if (city) {\r\n      const api_url = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\r\n      );\r\n      const data = await api_url.json();\r\n\r\n      if (data.message === 'city not found') {\r\n        this.setState({\r\n          temp: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          pressure: undefined,\r\n          sunset: undefined,\r\n          error: 'Please enter correct city name',\r\n        });\r\n      } else {\r\n        let sunset = data.sys.sunset;\r\n        let date = new Date();\r\n        date.setTime(sunset);\r\n        let sunset_date =\r\n        date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\r\n\r\n        this.setState({\r\n          temp: data.main.temp,\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          pressure: data.main.pressure,\r\n          sunset: sunset_date,\r\n          error: '',\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: 'Please enter city',\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Blocks\">\r\n          <div className=\"Left\">\r\n            <Info />\r\n          </div>\r\n          <div className=\"Right\">\r\n            <Form\r\n              city={this.state.city}\r\n              handleSubmit={this.handleSubmit}\r\n              handleCityChange={this.handleCityChange}\r\n            />\r\n            <WeatherData\r\n              temp={this.state.temp}\r\n              city={this.state.city}\r\n              country={this.state.country}\r\n              pressure={this.state.pressure}\r\n              sunset={this.state.sunset}\r\n              error={this.state.error}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}